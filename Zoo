class Animal:
    sound=''
    Breathe='Breathe in air'
    required_food=0
    def __init__(self,age_in_months,breed,required_food_in_kgs):
        if age_in_months>1:
            raise ValueError(f'Invalid value for field age_in_months: {age_in_months}')
        if required_food_in_kgs<=0:
            raise ValueError(f'Invalid value for field required_food_in_kgs: {required_food_in_kgs}')
  
        self._age_in_months=age_in_months
        self._breed=breed
        self._required_food_in_kgs=required_food_in_kgs
    def grow(self):
        self._required_food_in_kgs+=self.required_food
        self._age_in_months+=1
    @classmethod
    def make_sound(cls):
        print(cls.sound)
    @classmethod
    def breathe(cls):
        print(cls.Breathe)
    
    @property
    def age_in_months(self):
        return self._age_in_months
    @property
    def breed(self):
        return self._breed
    @property
    def required_food_in_kgs(self):
                        
        return self._required_food_in_kgs
def hunting(animal,kill):
    count1=0
    count = 0
    for i in animal.animals_list:
        if i.__class__==Deer:
            count =1
            animal.animals_list.remove(i)
        elif i.__class__==GoldFish:
            count1 =1
            animal.animals_list.remove(i)
            
    if count==0 and kill=='Deer':
        print('No deers to hunt')
    elif count1==0 and kill=='GoldFish':
        print('No GoldFish to hunt')
    
class Deer(Animal):
    sound='Buck Buck'
    required_food=2
class Lion(Animal):
    required_food=4
    sound='Roar Roar'
    def hunt(self,hunt_animal):
        kill='Deer'
        hunting(hunt_animal,kill)
        
class Shark(Animal):
    required_food=8
    sound='Shark Sound'
    Breathe='Breathe oxygen from water'
    def hunt(self,hunt_animal):
        kill='GoldFish'
        hunting(hunt_animal,kill)
        
class GoldFish(Animal):
    required_food=0.2
    sound='Hum Hum'
    Breathe='Breathe oxygen from water'
class Snake(Animal):
    required_food=0.5
    sound='Hiss Hiss'
    Breathe='Breathe in air'
    def hunt(self,hunt_animal):
        kill='Deer'
        hunting(hunt_animal,kill)
        
class Zoo:
    total_animals=[]
    def __init__(self):
        self._reserved_food_in_kgs=0
        self.animals_list=[]
    
    def add_food_to_reserve(self,food):
        self._reserved_food_in_kgs+=food
    @property
    def reserved_food_in_kgs(self):
        return (self._reserved_food_in_kgs)
        
    def feed(self,animal):
        if self.reserved_food_in_kgs>0:
            self._reserved_food_in_kgs-=animal._required_food_in_kgs
            animal.grow()
        
    def count_animals(self):
        return len(self.animals_list)
        
    def add_animal(self,animal):
        self.animals_list.append(animal)
        self.total_animals.append(animal)
    @classmethod
    def count_animals_in_all_zoos(cls):
        return len(cls.total_animals)
    @staticmethod
    def count_animals_in_given_zoos(zoos):
        count=0
        for zoo in zoos:
            count+=zoo.count_animals()
        return count
    
