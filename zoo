
class Deer:
    def __init__(self,age_in_months,breed,required_food_in_kgs):
        if age_in_months>1:
            raise ValueError(f'Invalid value for field age_in_months: {age_in_months}')
        if required_food_in_kgs<=0:
            raise ValueError(f'Invalid value for field required_food_in_kgs: {required_food_in_kgs}')
        self._age_in_months=age_in_months
        self._breed=breed
        self._required_food_in_kgs=required_food_in_kgs
        
    def grow(self):
        self._required_food_in_kgs+=2
        self._age_in_months+=1
        #return self.required_food_in_kgs
    def make_sound(self):
        print('Buck Buck')
    def breathe(self):
        print('Breathe in air')
    @property
    def age_in_months(self):
        return (self._age_in_months)
    @property
    def breed(self):
        return (self._breed)
    @property
    def required_food_in_kgs(self):
        return (self._required_food_in_kgs)
    
class Lion(Deer):
    '''def __init__(self,age_in_months,breed,required_food_in_kgs):
        super().__init__(age_in_months,breed,required_food_in_kgs)'''
        
    def grow(self):
        self._required_food_in_kgs+=4
        self._age_in_months+=1
        #return self.required_food_in_kgs
    def make_sound(self):
        print('Roar Roar')
    
class Shark(Deer):
    '''def __init__(self,age_in_months,breed,required_food_in_kgs):
        super().__init__(age_in_months,breed,required_food_in_kgs)'''
        
    def grow(self):
        self._required_food_in_kgs+=8
        self._age_in_months+=1
        #return self.required_food_in_kgs
    def make_sound(self):
        print('Shark Sound')
    def breathe(self):
        print('Breathe oxygen from water')
class GoldFish(Shark):
    def grow(self):
        self._required_food_in_kgs+=0.2
        self._age_in_months+=1
        #return self.required_food_in_kgs
    def make_sound(self):
        print('Hum Hum')
    def breathe(self):
        print('Breathe oxygen from water')
class Snake(Deer):
        
    def grow(self):
        self._required_food_in_kgs+=0.5
        self._age_in_months+=1
        #return self.required_food_in_kgs
    def make_sound(self):
        print('Hiss Hiss')
class Zoo:
    _reserved_food_in_kgs=0
    animal_count=0
    
    def add_food_to_reserve(self,food):
        self._reserved_food_in_kgs+=food
        self.animal_count=0
    @property
    def reserved_food_in_kgs(self):
        return (self._reserved_food_in_kgs)
    def feed(self,animal):
        self._reserved_food_in_kgs-=animal.required_food_in_kgs
        
    def count_animals(self):
        return self.animal_count
    def add_animal(self,animal):
        self.animal_count+=1
    #@classmethod
    '''def count_animals_in_all_zoos(self):
        self.count+=self.animal_count'''
class water_animals(GoldFish,Shark):
    def random(self):
        print(self.make_sound())
    
        
        
        #print(animal.breathe())
        #animal.age_in_months+=1

 #   print(water_animals.make_sound())
        


    
        
'''zoo = Zoo()
#zoo.reserved_food_in_kgs
zoo.add_food_to_reserve(10000000)
gold_fish = GoldFish(age_in_months=1, breed="Nemo", required_food_in_kgs=0.5)
zoo.add_animal(gold_fish)
zoo.feed(gold_fish)'''
#water=water_animals()
#zoo.reserved_food_in_kgs
#print(gold_fish.age_in_months)

#print(zoo.reserved_food_in_kgs)
#lion = Lion(age_in_months=1, breed="Hunter Shark", required_food_in_kgs=8)
