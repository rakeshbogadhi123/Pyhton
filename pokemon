class Pokemonland:
    Run=''
    sound=''
    attack_magnitude=0
    def __init__(self,name,level=1):
        if len(name)==0:
            raise ValueError('name cannot be empty')
        if level<=0:
            raise ValueError('level should be > 0')
        self._name=name
        self._level=level
        self._master=''
    @classmethod
    def run(cls):
        print(cls.Run)
    @classmethod
    def make_sound(cls):
        print(cls.sound)
    @property
    def name(self):
        return self._name
    @property
    def level(self):
        return self._level
    @property
    def master(self):
        if self._master=='':
            print('No Master')
        else:
            return self._master
            
class Pokemonwater:
    sound=''
    Run=''
    Swim=''
    attack_magnitude=0
    def __init__(self,name,level=1):
        if len(name)==0:
            raise ValueError('name cannot be empty')
        if level<=0:
            raise ValueError('level should be > 0')
        self._name=name
        self._level=level
        self._master=''
    @classmethod
    def run(cls):
        print(cls.Run)
    @classmethod
    def make_sound(cls):
        print(cls.sound)
    @classmethod
    def swim(cls):
        print(cls.Swim)
    @property
    def name(self):
        return self._name
    @property
    def level(self):
        return self._level
    @property
    def master(self):
        if self._master=='':
            print('No Master')
        else:
            return self._master
            
class Pokemonair:
    sound=''
    Fly=''
    def __init__(self,name,level):
        if len(name)==0:
            raise ValueError('name cannot be empty')
        if level<=0:
            raise ValueError('level should be > 0')
        self._name=name
        self._level=level
        self._master=''
    @property
    def name(self):
        return self._name
    @property
    def level(self):
        return self._level
    @classmethod
    def make_sound(cls):
        print(cls.sound)
        
    @classmethod        
    def fly(cls):
        print(cls.Fly)
        
    @property
    def master(self):
        if self._master=='':
            print('No Master')
        else:
            return self._master
            
class Pikachu(Pokemonland):
    sound='Pika Pika'
    Run='Pikachu running...'
    attack_magnitude=10
    
    def attack(self):
        print(f'Electric attack with {self._level*self.attack_magnitude} damage')
        self._level+=1
        
    def __str__(self):
        return f'{self._name} - Level {self._level}'
        
class Squirtle(Pokemonwater):
    sound='Squirtle...Squirtle'
    Run='Squirtle running...'
    Swim='Squirtle swimming...'
    attack_magnitude=9
    
    def attack(self):
        print(f'Water attack with {self._level*self.attack_magnitude} damage')
        self._level+=1
        
    def __str__(self):
        return f'{self._name} - Level {self._level}'
        
class Pidgey(Pokemonair):
    sound='Pidgey...Pidgey'
    Fly='Pidgey flying...'
    attack_magnitude=5
    
    def attack(self):
        print(f'Air attack with {self._level*self.attack_magnitude} damage')
        self._level+=1
        
    def __str__(self):
        return f'{self._name} - Level {self._level}'
        
class Swanna(Pokemonair,Pokemonwater):
    sound='Swanna...Swanna'
    Fly='Swanna flying...'
    Swim='Swanna swimming...'
    water_attack=9
    air_attack=5
    def attack(self):
        print(f'Water attack with {self._level*self.water_attack} damage')
        print(f'Air attack with {self._level*self.air_attack} damage')
        self._level+=1
        
    def __str__(self):
        return f'{self._name} - Level {self._level}'
        
class Zapdos(Pokemonair):
    sound='Zap...Zap'
    Fly='Zapdos flying...'
    land_attack=10
    air_attack=5
    def attack(self):
        print(f'Electric attack with {self._level*self.land_attack} damage')
        print(f'Air attack with {self._level*self.air_attack} damage')
        self._level+=1
    def __str__(self):
        return f'{self._name} - Level {self._level}'
    
class Island:
    islands_list=[]
    def __init__(self,name,max_no_of_pokemon,total_food_available_in_kgs):
        self._name=name
        self._max_no_of_pokemon=max_no_of_pokemon
        self._total_food_available_in_kgs=total_food_available_in_kgs
        self._pokemon_left_to_catch=0
        self.islands_list.append(self)
        
    @property
    def name(self): 
        return self._name
    @property
    def max_no_of_pokemon(self):
        return self._max_no_of_pokemon
    @property
    def total_food_available_in_kgs(self):
        return self._total_food_available_in_kgs
    @property
    def pokemon_left_to_catch(self):
        return self._pokemon_left_to_catch
        
    def add_pokemon(self,pokemon):
        self._pokemon_left_to_catch+=1
        if self._pokemon_left_to_catch>self._max_no_of_pokemon:
            self._pokemon_left_to_catch-=1
            print('Island at its max pokemon capacity')
    def __str__(self):
        return f'{self._name} - {self._pokemon_left_to_catch} pokemon - {self._total_food_available_in_kgs} food'
    @classmethod
    def get_all_islands(cls):
        return cls.islands_list
        
class Trainer(Island):
    def __init__(self,name):
        self._name=name
        self._experience=100
        self._food_in_bag=0
        self._max_food_in_bag=10*self._experience
        self._current_island=None
        self.caught_list=[]
    
    @property
    def name(self):
        return self._name
    @property
    def experience(self):
        return self._experience
    @property
    def food_in_bag(self):
        return self._food_in_bag
    @property
    def max_food_in_bag(self):
        return self._max_food_in_bag
    @property
    def current_island(self):
        if self._current_island==None:
            print('You are not on any island')
        else:
            return self._current_island
    def move_to_island(self,island):
        self._current_island=island
        
    def collect_food(self):
        if self._current_island==None or self._current_island._total_food_available_in_kgs==0:
            print('Move to an island to collect food')
        elif self._food_in_bag==self._max_food_in_bag:
            self._food_in_bag=self._max_food_in_bag
        elif self._current_island._total_food_available_in_kgs>self._max_food_in_bag:
            self._food_in_bag=self._max_food_in_bag
            self._current_island._total_food_available_in_kgs-=self._max_food_in_bag
        elif self._current_island._total_food_available_in_kgs<=self._max_food_in_bag:
            self._food_in_bag+=self._current_island._total_food_available_in_kgs
            self._current_island._total_food_available_in_kgs-=self._food_in_bag
            
            
    def catch(self,pokemon):
        if self._experience>=100*pokemon.level:
            self.caught_list.append(pokemon)
            print(f'You caught {pokemon.name}')
            self._experience+=pokemon.level*20
            pokemon._master=self
        else:
            print(f'You need more experience to catch {pokemon.name}')
        
    def get_my_pokemon(self):
        return self.caught_list
      
